generator client {
  provider      = "prisma-client-js"
  output        = "../clients/postgres/hostdb"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator prismabox {
  provider                    = "prismabox"
  output                      = "../prismabox/postgres/hostdb"
  inputModel                  = "true"
  typeboxImportVariableName   = "t"
  additionalProperties        = "true"
  typeboxImportDependencyName = "elysia"
}

datasource db {
  provider = "postgresql"
  url      = env("DEFAULT_HOST_DB_CONNECTION_STRING")
}

model Event {
  eventId     String    @unique(map: "event_pkey") @default(uuid()) @map("eventid") @db.Uuid
  name        String    @map("eventname") @db.VarChar(50)
  description String?
  logo        String?   @map("logo") @db.VarChar
  startDate   DateTime? @map("startdate") @db.Date
  endDate     DateTime? @map("enddate") @db.Date
  venue       String?   @map("location") @db.VarChar(500)
  createAt    DateTime? @default(now()) @map("create_at") @db.Date
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Date
  x           Int?      @map("x")
  y           Int?      @map("y")
  onWeb       Bytes?    @map("onweb")
  profit      Decimal   @map("price") @db.Decimal(10, 2)
  status      String?   @default("On-going") @map("status") @db.VarChar(50)

  @@map("event")
}

model EventPayment {
  eventPayment       String    @unique @default(uuid()) @map("eventPaymentId") @db.Uuid
  eventId            String    @map("eventid") @db.Uuid
  vendorId           String    @map("vendorid") @db.Uuid
  locationId         String    @unique @map("locationid") @db.Uuid
  deposit            Decimal   @map("deposit") @db.Decimal(10, 2)
  depositPaymentDate DateTime? @map("depositpaymentdate") @db.Date
  total              Decimal   @map("total") @db.Decimal(10, 2)
  totalPaymentDate   DateTime? @map("totalpaymentdate") @db.Date
  createDate         DateTime? @default(now()) @map("create_at") @db.Date
  status             String?   @default("Pending") @map("status") @db.VarChar(50)

  @@id([eventId, vendorId, locationId])
  @@map("event_register")
}

model Location {
  locationId String  @unique @default(uuid()) @map("locationid") @db.Uuid
  eventId    String  @map("eventid") @db.Uuid
  typeId     String  @map("typeid") @db.Uuid
  vendorId   String  @map("vendorid") @db.Uuid
  shape      String  @map("shape") @db.VarChar(50)
  direction  String  @map("direction") @db.VarChar(50)
  x          Int?    @map("x")
  y          Int?    @map("y")
  length     Int?    @map("length")
  width      Int?    @map("width")
  status     String? @map("status") @db.VarChar(50)

  @@id([locationId, eventId, typeId])
  @@map("location")
}

model LocationType {
  typeId   String  @id @unique @default(uuid()) @map("typeid") @db.Uuid
  eventId  String  @map("eventid") @db.Uuid
  typeName String  @map("typename") @db.VarChar(50)
  price    Decimal @map("price") @db.Decimal(10, 2)
  status   String? @map("status") @db.VarChar(50)

  @@map("locationtype")
}

model Theme {
  themeId String   @id @unique @default(uuid()) @map("themeid") @db.Uuid
  status  Boolean? @default(false) @map("status")

  @@map("theme")
}

model Vendor {
  vendorId    String    @unique(map: "vendor_pkey_unique") @default(uuid()) @map("vendorid") @db.Uuid
  username    String    @unique @db.VarChar(40)
  password    String    @db.VarChar(100)
  vendorName  String?   @map("vendorname") @db.VarChar(500)
  phone       String?   @map("phone") @db.VarChar(10)
  email       String?   @map("email") @db.VarChar(100)
  image       String?   @map("image") @db.VarChar
  address     String?   @map("address") @db.VarChar(500)
  urlQr       String?   @map("ulQr") @db.VarChar
  category    String?   @default("") @db.VarChar(40)
  createDate  DateTime? @default(now()) @map("create_at") @db.Date
  updatedDate DateTime? @default(now()) @map("updated_at") @db.Date
  status      Boolean?  @default(true) @map("status")

  @@map("vendor")
}

model Order {
  orderId     String    @default(uuid()) @map("orderid") @db.Uuid
  eventId     String    @map("eventid") @db.Uuid
  vendorId    String    @map("vendorid") @db.VarChar(100)
  name        String    @map("name") @db.VarChar(250)
  totalAmount Int?      @map("totalamount")
  totalPrice  Decimal   @db.Decimal(10, 2)
  createAt    DateTime? @default(now()) @map("create_at") @db.Date
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Date

  @@id([orderId, eventId, vendorId])
  @@map("order")
}

model OrderDetail {
  orderDetailId String    @db.Uuid
  eventId       String    @map("eventid") @db.Uuid
  vendorId      String    @map("vendorid") @db.VarChar(100)
  orderId       String    @map("orderid") @db.Uuid
  quantity      Int?      @map("quantity")
  unitPrice     Decimal   @map("unitPrice") @db.Decimal(10, 2)
  totalPrice    Decimal   @map("totalprice") @db.Decimal(12, 4)
  createAt      DateTime? @default(now()) @map("create_at") @db.Date
  updatedAt     DateTime? @default(now()) @map("updated_at") @db.Date

  @@id([eventId, vendorId, orderId])
  @@map("orderdetail")
}

model Product {
  productId   String    @id @default(uuid()) @map("productid") @db.Uuid
  categoryId  String    @map("categoryid") @db.Uuid
  productName String    @map("name") @db.VarChar
  description String?   @map("description") @db.VarChar
  quantity    Int?      @map("quantity")
  count       Int?      @map("count")
  createAt    DateTime? @default(now()) @map("create_at") @db.Date
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Date
  status      Boolean?  @default(false) @map("status")

  @@map("product")
}

model Config {
  configId        String    @unique(map: "config_pkey") @default(dbgenerated("gen_random_uuid()")) @map("configid") @db.Uuid
  sessionDuration Int?      @default(30) @map("session_duration")
  createAt        DateTime? @default(now()) @map("create_at") @db.Date
  createBy        String?   @default("undefined") @map("create_by") @db.VarChar(40)
  updatedAt       DateTime? @default(now()) @map("updated_at") @db.Date
  updatedBy       String?   @default("undefined") @map("updated_by") @db.VarChar(40)

  @@map("config")
}

model ProductItem {
  productItemId String    @unique @default(uuid()) @map("productItemId") @db.Uuid
  productId     String    @map("productid") @db.Uuid
  vendorid      String    @map("vendorid") @db.Uuid
  name          String    @map("name") @db.VarChar(253)
  imageUrl      String?   @map("imageurl") @db.VarChar
  description   String    @map("description") @db.VarChar(300)
  productOrigin String    @map("productorigin") @db.VarChar
  outofstock    Boolean   @default(false) @map("outofstock")
  price         Decimal   @map("price") @db.Decimal(10, 2)
  unit          String    @map("unit") @db.VarChar(10)
  createAt      DateTime? @default(now()) @map("create_at") @db.Date
  updatedAt     DateTime? @default(now()) @map("updated_at") @db.Date
  status        Boolean   @default(false) @map("status")

  @@id([productItemId])
  @@map("productItem")
}

model Payment {
  transactionId   String    @default(uuid()) @map("transactionid") @db.Uuid
  orderId         String    @map("orderid") @db.Uuid
  eventId         String    @map("eventid") @db.Uuid
  transactionType String?   @map("transactiontype") @db.VarChar
  paymentTime     DateTime? @default(now()) @map("paymentTime") @db.Date
  price           Decimal   @default(0.0) @map("price") @db.Decimal(10, 2)
  status          String    @default("pending") @map("status") @db.VarChar(20)

  @@id([transactionId, orderId, eventId])
  @@map("payment")
}

model Category {
  categoryId   String    @id @default(uuid()) @map("categoryid") @db.Uuid
  categoryName String    @map("categoryname") @db.VarChar(100)
  createAt     DateTime? @default(now()) @map("create_at") @db.Date
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Date
  status       Boolean   @default(false) @map("status")

  @@map("category")
}

model Menu {
  menuId    String    @default(uuid()) @map("menuid") @db.Uuid
  eventId   String    @map("eventid") @db.Uuid
  vendorId  String    @map("vendorid") @db.Uuid
  menuName  String    @map("menuname") @db.VarChar(100)
  createAt  DateTime? @default(now()) @map("create_at") @db.Date
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Date

  @@id([menuId, eventId, vendorId])
  @@map("menu")
}

model Staff {
  staffId   String    @id @default(uuid()) @map("staffid") @db.Uuid
  vendorId  String    @map("vendorId") @db.Uuid
  username  String    @unique @map("username") @db.VarChar(40)
  password  String    @db.VarChar(50)
  name      String    @map("name") @db.VarChar(100)
  image     String    @map("image") @db.VarChar
  createAt  DateTime? @default(now()) @map("create_at") @db.Date
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Date
  status    Boolean?  @default(true) @map("status")
}
