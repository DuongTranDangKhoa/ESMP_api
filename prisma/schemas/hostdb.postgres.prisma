generator client {
  provider      = "prisma-client-js"
  output        = "../clients/postgres/hostdb"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator prismabox {
  provider                    = "prismabox"
  output                      = "../prismabox/postgres/hostdb"
  typeboxImportDependencyName = "elysia"
  inputModel                  = "true"
  typeboxImportVariableName   = "t"
  additionalProperties        = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DEFAULT_HOST_DB_CONNECTION_STRING")
}

model Event {
  eventId       String          @id @default(uuid()) @map("eventid") @db.Uuid
  name          String          @map("eventname") @db.VarChar(50)
  description   String?
  startDate     DateTime?       @map("startdate") @db.Date
  endDate       DateTime?       @map("enddate") @db.Date
  coordinates   String?         @db.VarChar(500)
  createAt      DateTime?       @default(now()) @map("create_at") @db.Date
  updatedAt     DateTime?       @default(now()) @map("updated_at") @db.Date
  x             Int?            @default(100) @map("x")
  y             Int?            @default(100) @map("y")
  profit        Decimal         @db.Decimal(10, 2)
  status        String?         @default("upcomming") @map("status") @db.VarChar(50)
  height        Int?            @default(400) @map("height")
  hostId        String          @map("hostid") @db.Uuid
  stageValue    String?         @map("stagevalue") @db.VarChar
  themeId       String          @map("themeid") @db.Uuid
  width         Int?            @default(600) @map("width")
  onWeb         Boolean?        @default(false) @map("onweb")
  host          host            @relation(fields: [hostId], references: [hostid], map: "event_host_fk")
  theme         Theme           @relation(fields: [themeId], references: [themeId], map: "event_theme_fk")
  LocationType  LocationType[]
  service       service[]
  VendorInEvent VendorInEvent[]

  @@map("event")
}

model EventPayment {
  eventPaymentid     String        @id @default(uuid()) @map("eventPaymentId") @db.Uuid
  locationId         String        @unique(map: "eventpayment_unique") @map("locationid") @db.Uuid
  deposit            Decimal       @map("deposit") @db.Decimal(10, 2)
  depositPaymentDate DateTime?     @map("depositpaymentdate") @db.Date
  total              Decimal?      @map("total") @db.Decimal(10, 2)
  totalPaymentDate   DateTime?     @map("totalpaymentdate") @db.Date
  createDate         DateTime?     @default(now()) @map("create_at") @db.Date
  status             String?       @default("Pending Deposit ") @map("status") @db.VarChar(50)
  vendorinEventId    String        @unique(map: "eventpayment_unique_1") @map("vendorinEventId") @db.Uuid
  location           Location      @relation(fields: [locationId], references: [locationId])
  vendorInEvent      VendorInEvent @relation(fields: [vendorinEventId], references: [vendorinEventId])

  @@map("eventpayment")
}

model VendorInEvent {
  vendorinEventId String        @id @unique @default(uuid()) @db.Uuid
  eventId         String        @db.Uuid
  vendorId        String        @db.Uuid
  status          String?       @default(dbgenerated("true")) @map("status") @db.VarChar
  EventPayment    EventPayment?
  Menu            Menu?
  event           Event         @relation(fields: [eventId], references: [eventId])
  vendor          Vendor        @relation(fields: [vendorId], references: [vendorId])

  @@map("vendorinevent")
}

model Location {
  locationId   String        @id @unique @default(uuid()) @map("locationid") @db.Uuid
  typeId       String        @map("typeid") @db.Uuid
  shape        String        @default("shape") @map("shape") @db.VarChar(50)
  x            Int?          @map("x")
  y            Int?          @map("y")
  width        Int?          @map("width")
  status       String?       @map("status") @db.VarChar(50)
  height       Int?
  rotation     Int?          @map("rotation")
  EventPayment EventPayment?
  LocationType LocationType  @relation(fields: [typeId], references: [typeId])

  @@map("location")
}

model LocationType {
  typeId   String     @id @unique @default(uuid()) @map("typeid") @db.Uuid
  eventId  String     @map("eventid") @db.Uuid
  typeName String     @map("typename") @db.VarChar(50)
  price    Decimal    @map("price") @db.Decimal(10, 2)
  status   String?    @map("status") @db.VarChar(50)
  location Location[]
  Event    Event      @relation(fields: [eventId], references: [eventId])

  @@map("locationtype")
}

model Theme {
  themeId String   @id @unique @default(uuid()) @map("themeid") @db.Uuid
  name    String   @map("name") @db.VarChar(250)
  status  Boolean? @default(true) @map("status")
  hostid  String   @db.Uuid
  event   Event[]
  host    host     @relation(fields: [hostid], references: [hostid], map: "theme_host_fk")

  @@map("theme")
}

model Vendor {
  vendorId      String          @id @default(uuid()) @map("vendorid") @db.Uuid
  userid        String          @unique(map: "unique_vendor_userid") @db.Uuid
  hostid        String          @db.Uuid
  phone         String?         @map("phone") @db.VarChar(10)
  email         String?         @map("email") @db.VarChar(100)
  address       String?         @map("address") @db.VarChar(500)
  urlQr         String?         @map("ulQr") @db.VarChar
  status        Boolean?        @default(true) @map("status")
  order         Order[]
  product       Product[]
  productItem   ProductItem[]
  staff         staff[]
  account       Account         @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vendor_account")
  host          host            @relation(fields: [hostid], references: [hostid], onDelete: NoAction, onUpdate: NoAction, map: "vendor_host_fkey")
  vendorinevent VendorInEvent[]

  @@map("vendor")
}

model Account {
  id           String         @id @default(uuid()) @db.Uuid
  username     String         @unique(map: "account_unique") @db.VarChar(50)
  password     String         @db.VarChar(50)
  role         String         @db.VarChar(10)
  name         String         @db.VarChar(100)
  createdat    DateTime?      @default(now()) @db.Timestamp(6)
  updatedat    DateTime?      @default(now()) @db.Timestamp(6)
  status       Boolean?       @default(true)
  host         host?
  notification notification[]
  staff        staff?
  vendor       Vendor?

  @@map("account")
}

model Order {
  orderId     String        @id @default(uuid()) @map("orderid") @db.Uuid
  eventId     String        @map("eventid") @db.Uuid
  vendorId    String        @map("vendorid") @db.Uuid
  name        String        @map("name") @db.VarChar(250)
  totalAmount Int?          @map("totalamount")
  totalPrice  Decimal       @db.Decimal(10, 2)
  createAt    DateTime?     @default(now()) @map("create_at") @db.Date
  updatedAt   DateTime?     @default(now()) @map("updated_at") @db.Date
  status      String        @map("status") @db.VarChar(10)
  vendor      Vendor        @relation(fields: [vendorId], references: [vendorId], map: "order_vendor_fk")
  OrderDetail OrderDetail[]
  payment     Payment?

  @@map("order")
}

model OrderDetail {
  orderDetailId String      @id @default(uuid()) @map("orderdetailid") @db.Uuid
  productitemId String      @map("productitemid") @db.Uuid
  orderId       String      @map("orderid") @db.Uuid
  quantity      Int?        @map("quantity")
  unitPrice     Decimal     @map("unitPrice") @db.Decimal(10, 2)
  totalPrice    Decimal     @map("totalprice") @db.Decimal(12, 4)
  order         Order       @relation(fields: [orderId], references: [orderId])
  productItem   ProductItem @relation(fields: [productitemId], references: [productItemId])

  @@map("orderdetail")
}

model Product {
  productId            String                 @id @default(uuid()) @map("productid") @db.Uuid
  vendorid             String                 @map("vendorid") @db.Uuid
  categoryId           String                 @map("categoryid") @db.Uuid
  productName          String                 @map("name") @db.VarChar
  description          String?                @map("description") @db.VarChar
  quantity             Int?                   @map("quantity")
  createAt             DateTime?              @default(now()) @map("create_at") @db.Date
  updatedAt            DateTime?              @default(now()) @map("updated_at") @db.Date
  status               Boolean?               @default(false) @map("status")
  count                Int?                   @map("count")
  category             Category               @relation(fields: [categoryId], references: [categoryId])
  vendor               Vendor                 @relation(fields: [vendorid], references: [vendorId])
  ProductInProductItem ProductInProductItem[]

  @@map("product")
}

model Config {
  configId        String    @unique(map: "config_pkey") @default(dbgenerated("gen_random_uuid()")) @map("configid") @db.Uuid
  sessionDuration Int?      @default(30) @map("session_duration")
  createAt        DateTime? @default(now()) @map("create_at") @db.Date
  createBy        String?   @default("undefined") @map("create_by") @db.VarChar(40)
  updatedAt       DateTime? @default(now()) @map("updated_at") @db.Date
  updatedBy       String?   @default("undefined") @map("updated_by") @db.VarChar(40)

  @@map("config")
}

model ProductItem {
  productItemId        String                 @id @default(uuid()) @map("productItemId") @db.Uuid
  name                 String                 @map("name") @db.VarChar(253)
  description          String                 @map("description") @db.VarChar(300)
  price                Decimal                @map("price") @db.Decimal(10, 2)
  createAt             DateTime?              @default(now()) @map("create_at") @db.Date
  updatedAt            DateTime?              @default(now()) @map("updated_at") @db.Date
  status               Boolean                @default(true) @map("status")
  vendorId             String                 @map("vendorId") @db.Uuid
  orderDetails         OrderDetail[]
  vendor               Vendor                 @relation(fields: [vendorId], references: [vendorId])
  ProductInProductItem ProductInProductItem[]
  menus                ProductItemInMenu[]

  @@map("productItem")
}

model ProductInProductItem {
  productInProductItemId String      @id @default(uuid()) @map("productInProductItemId") @db.Uuid
  productItemId          String      @map("productitemid") @db.Uuid
  productId              String      @map("productid") @db.Uuid
  unit                   String      @map("unit") @db.VarChar(10)
  quantity               Int?        @map("quantity")
  product                Product     @relation(fields: [productId], references: [productId])
  productItem            ProductItem @relation(fields: [productItemId], references: [productItemId])

  @@map("productinproductitem")
}

model Payment {
  paymentId       String    @id(map: "payment_pk") @default(uuid()) @map("paymentId") @db.Uuid
  orderId         String    @unique(map: "payment_unique") @map("orderid") @db.Uuid
  transactionType String?   @map("transactiontype") @db.VarChar
  paymentTime     DateTime? @default(now()) @map("paymentTime") @db.Date
  price           Decimal   @default(0.0) @map("price") @db.Decimal(10, 2)
  status          String    @default("pending") @map("status") @db.VarChar(20)
  order           Order     @relation(fields: [orderId], references: [orderId], onDelete: NoAction, onUpdate: NoAction, map: "payment_order_fk")

  @@map("payment")
}

model Category {
  categoryId   String    @id @default(uuid()) @map("categoryid") @db.Uuid
  categoryName String    @map("categoryname") @db.VarChar(100)
  createAt     DateTime? @default(now()) @map("create_at") @db.Date
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Date
  status       Boolean   @default(true) @map("status")
  hostid       String    @db.Uuid
  host         host      @relation(fields: [hostid], references: [hostid], map: "category_host_fk")
  products     Product[]

  @@map("category")
}

model ProductItemInMenu {
  productItemInMenuId String      @id @default(uuid()) @map("productItemInMenu") @db.Uuid
  productItemId       String      @map("productitemid") @db.Uuid
  menuId              String      @map("menuId") @db.Uuid
  status              Boolean     @default(true) @map("status")
  menu                Menu        @relation(fields: [menuId], references: [menuId])
  productItem         ProductItem @relation(fields: [productItemId], references: [productItemId])

  @@map("productiteminmenu")
}

model Menu {
  menuId        String              @id @default(uuid()) @map("menuId") @db.Uuid
  menuName      String              @map("menuname") @db.VarChar(100)
  createAt      DateTime?           @default(now()) @map("create_at") @db.Date
  updatedAt     DateTime?           @default(now()) @map("updated_at") @db.Date
  vendorInEvent VendorInEvent       @relation(fields: [menuId], references: [vendorinEventId])
  productItems  ProductItemInMenu[]

  @@map("menu")
}

model SessionData {
  accessToken String @id @default(uuid()) @map("accessToken") @db.Uuid
  createdAt   Int
  expiredAt   Int
  updatedAt   Int
  sessionInfo Json
}

model host {
  userid           String        @unique(map: "unique_host_userid") @db.Uuid
  expiretime       DateTime?     @db.Timestamp(6)
  bankingaccount   String?       @db.VarChar(20)
  phone            String?       @db.VarChar(15)
  email            String?       @db.VarChar(100)
  eventstoragetime DateTime?     @db.Timestamp(6)
  hostid           String        @id @unique(map: "host_hostid_unique") @default(uuid()) @db.Uuid
  category         Category[]
  event            Event[]
  account          Account       @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_host_account")
  theme            Theme[]
  transaction      transaction[]
  vendor           Vendor[]
}

model notification {
  id        String    @id @default(uuid()) @db.Uuid
  userid    String    @db.Uuid
  source    String?
  create_at DateTime? @default(now()) @db.Timestamp(6)
  account   Account   @relation(fields: [userid], references: [id])
}

/// This model has been renamed to 'Renamedpackage' during introspection, because the original name 'package' is reserved.
model Renamedpackage {
  id               String        @id @default(uuid()) @db.Uuid
  name             String?       @db.VarChar(100)
  description      String?
  eventstoragetime Int?
  createdat        DateTime?     @default(now()) @db.Timestamp(6)
  updatedat        DateTime?     @default(now()) @db.Timestamp(6)
  status           Boolean?
  price            Decimal?      @db.Decimal(10, 2)
  transaction      transaction[]

  @@map("package")
}

model transaction {
  id             String         @id @default(uuid()) @db.Uuid
  hostid         String         @db.Uuid
  packageid      String         @db.Uuid
  createdat      DateTime?      @default(now()) @db.Timestamp(6)
  status         String?        @db.VarChar(10)
  host           host           @relation(fields: [hostid], references: [hostid], onDelete: NoAction, onUpdate: NoAction, map: "transaction_host_fk")
  Renamedpackage Renamedpackage @relation(fields: [packageid], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model staff {
  staffid  String  @id(map: "Staff_pkey") @default(uuid()) @db.Uuid
  vendorId String  @db.Uuid
  userid   String  @unique(map: "Staff_username_key") @db.Uuid
  account  Account @relation(fields: [userid], references: [id], map: "staff_account_fk")
  vendor   Vendor  @relation(fields: [vendorId], references: [vendorId], map: "staff_vendor_fk")

  @@unique([userid, vendorId], map: "staff_unique")
}

model service {
  id       String  @id @default(uuid()) @db.Uuid
  eventid  String  @db.Uuid
  name     String  @db.VarChar(250)
  price    Decimal @db.Decimal(10, 2)
  quantity Int
  event    Event   @relation(fields: [eventid], references: [eventId], onDelete: NoAction, onUpdate: NoAction, map: "service_event_fk")
}
